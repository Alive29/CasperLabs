branches:
  - dev
  - master
  - release-*
  - testing*

# Common parts

# FYI: There's no merging of arrays in YAML. At least not in the Go library
# Drone uses to parse YAML. So if you mix in &sbtenv and want to add
# additional volumes, as in package step, you need to specify all volumes.

__buildenv: &buildenv
  image: casperlabs/buildenv:latest

__sbtenv: &sbtenv
  <<: *buildenv
  environment:
    - _JAVA_OPTIONS=-Xms2G -Xmx4G -XX:MaxMetaspaceSize=1G
  volumes:
    - /var/cache/cl-build/.sbt:/root/.sbt
    - /var/cache/cl-build/.ivy2:/root/.ivy2

# Build definition

clone:
  git-clone:
    image: casperlabs/buildenv:latest
    group: clone
    commands: |
      set -ex
      git clone -b ${DRONE_TAG:-$DRONE_BRANCH} $DRONE_REMOTE_URL .
      if [ x$DRONE_PULL_REQUEST != x ]; then
          git fetch origin refs/pull/$DRONE_PULL_REQUEST/head
          EMAIL=ci git merge --no-edit FETCH_HEAD
      fi
      git rev-parse HEAD

  git-clone-mac:
    image: appleboy/drone-ssh
    group: clone
    secrets: [ ssh_key, ssh_host, ssh_username ]
    script: |
      set -ex
      mkdir DRONE_BUILD_${DRONE_BUILD_NUMBER}
      cd DRONE_BUILD_${DRONE_BUILD_NUMBER}
      git clone -b ${DRONE_TAG:-${DRONE_BRANCH}} ${DRONE_REMOTE_URL} .
      if [ x${DRONE_PULL_REQUEST} != x ]; then
          git fetch origin refs/pull/${DRONE_PULL_REQUEST}/head
          EMAIL=ci git merge --no-edit FETCH_HEAD
      fi
      git rev-parse HEAD

pipeline:

  # pr

  sbt-update-mac:
    image: appleboy/drone-ssh
    group: sbt
    secrets: [ ssh_key, ssh_host, ssh_username ]
    command_timeout: 600s
    script: |
      cd DRONE_BUILD_${DRONE_BUILD_NUMBER}
      export _JAVA_OPTIONS='-Xms2G -Xmx4G -XX:MaxMetaspaceSize=1G'
      export PATH=$PATH:/usr/local/bin
      sbt update

  run-rust-tests-mac:
    image: appleboy/drone-ssh
    group: test-rust
    secrets: [ ssh_key, ssh_host, ssh_username ]
    command_timeout: 3600s
    script: |
      cd DRONE_BUILD_${DRONE_BUILD_NUMBER}
      export PATH=$PATH:/usr/local/bin
      cd execution-engine/
      ~/.cargo/bin/cargo test

  run-unit-tests-mac:
    image: appleboy/drone-ssh
    group: test-sbt
    secrets: [ ssh_key, ssh_host, ssh_username ]
    command_timeout: 3600s
    script: |
      cd DRONE_BUILD_${DRONE_BUILD_NUMBER}
      export PATH=$PATH:/usr/local/bin
      sbt test


  package-ee-mac:
    image: appleboy/drone-ssh
    group: package-ee
    secrets: [ ssh_key, ssh_host, ssh_username ]
    command_timeout: 3600s
    script: |
      cd DRONE_BUILD_${DRONE_BUILD_NUMBER}
      mkdir -p artifacts/${DRONE_BRANCH}
      export PATH=$PATH:/usr/local/bin:~/.cargo/bin
      echo $PATH
      mkdir -p artifacts/${DRONE_BRANCH}
      make cargo-package-all
      WORKING_DIR=$(pwd) ;
      cd execution-engine/target/release/rpmbuild/SOURCES ;
      OS=$(uname -s | tr '[:upper:]' '[:lower:]') ;
      ARCH=$(uname -p) ;
      SOURCE=$(ls casperlabs-engine-grpc-server-*.tar.gz | sed "s/.tar.gz//") ;
      TARGET=$(ls $SOURCE*.tar.gz | sed "s/.tar.gz/_"$OS"_"$ARCH".tar.gz/") ;
      tar -xzf $SOURCE.tar.gz ;
      tar -czf $TARGET -C $SOURCE/usr/bin/ . &&
      cp $TARGET $WORKING_DIR/artifacts/${DRONE_BRANCH}

  copy-mac-tar-drone-container:
    <<: *buildenv
    secrets: [ ssh_username, ssh_key, ssh_host ]
    commands:
      - mkdir -p ~/.ssh
      - mkdir -p artifacts/
      - umask 077 && echo "$SSH_KEY" > ~/.ssh/id_rsa
      - rsync -avzhe "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" $SSH_USERNAME@$SSH_HOST:DRONE_BUILD_${DRONE_BUILD_NUMBER}/artifacts/${DRONE_BRANCH}/casperlabs-engine-grpc-server-*darwin*.gz artifacts/${DRONE_BRANCH}/
      - ls -alR artifacts/
