syntax = "proto3";

package io.casperlabs.node.api.casper;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "io/casperlabs/casper/consensus/consensus.proto";
import "io/casperlabs/casper/consensus/info.proto";

// CasperService is the way for user and dApp developer to interact with the system,
// including deploying contracts, looking at the DAG and querying state.
service CasperService {

    // Add a deploy to the deploy pool on the node,
    // to be processed during subsequent block proposals.
    rpc Deploy(DeployRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v2/deploys/{deploy.deploy_hash=*}"
            body: "deploy"
        };
    }

    // Get the block summary with extra information about finality.
    rpc GetBlockInfo(GetBlockInfoRequest) returns (io.casperlabs.casper.consensus.info.BlockInfo) {
    	option (google.api.http) = {
    		get: "/v2/blocks/{block_hash_base16=*}"
    	};
    }
}

message DeployRequest {
    io.casperlabs.casper.consensus.Deploy deploy = 1;
}

message GetBlockInfoRequest {
	// Either the full or just the first few characters of the block hash in base16 encoding,
	// so that it works with the client's redacted displays.
	string block_hash_base16 = 1;
	View view = 2;

	enum View {
		// Only include information which is based on the header.
		BASIC = 0;
		// Include extra information that requires the full block,
		// for example the size, number of errors in deploys, etc.
		FULL = 1;
	}
}
