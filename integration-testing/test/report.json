{"data": [{"type": "report", "id": 1, "attributes": {"environment": {"Python": "3.7.4", "Platform": "Darwin-19.0.0-x86_64-i386-64bit"}, "summary": {"failed": 1, "num_tests": 1, "duration": 61.9079430103302}, "created_at": "2019-11-08 17:06:56.453348"}, "relationships": {"tests": {"data": [{"id": 1, "type": "test"}]}}}], "included": [{"id": 1, "type": "test", "attributes": {"name": "test/test_clarity.py::test_create_account_key", "duration": 61.59723234176636, "run_index": 0, "setup": {"name": "setup", "duration": 0.03848123550415039, "outcome": "passed"}, "call": {"name": "call", "duration": 61.519298791885376, "outcome": "failed", "longrepr": "def test_create_account_key():\n        # driver = one_node_network_with_clarity.selenium_driver\n        remote = \"http://127.0.0.1:4444/wd/hub\"\n        driver = webdriver.Remote(remote, DesiredCapabilities.CHROME)\n        driver.implicitly_wait(10)\n        clarity_host = f\"https://clarity.casperlabs.io/\"\n    \n        driver.get(clarity_host)\n        driver.set_window_size(1280, 681)\n>       login_clarity(driver)\n\ntest_clarity.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_clarity.py:123: in login_clarity\n    WebDriverWait(driver, 20).until(expected_conditions.number_of_windows_to_be(1))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ee85e3cf2c54e5097798ada00b97b9d1\")>\nmethod = <selenium.webdriver.support.expected_conditions.number_of_windows_to_be object at 0x106d84650>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../../../../.local/share/virtualenvs/integration-testing-cBNSXfMU/lib/python3.7/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException"}, "teardown": {"name": "teardown", "duration": 0.0009710788726806641, "outcome": "passed"}, "outcome": "failed"}}]}
